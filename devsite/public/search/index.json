
{ "results": [



    {
    "url": "https://heathshults.github.io/about/brand/",
    "title": "",
    "content": "from mailchimp have need for framekit&rsquo;s brand resources? great! we only few guidelines follow, turn ask you to follow as well. these were inspired by mailchimp&rsquo;s assets. mark logo use either the framekit (a capital b) standard (just framekit). it should always appear san francisco display semibold. do not twitter bird association with framekit. download one of three styles, each available an svg file. right click, save as. name project framework be referred before it, s, abbreviations except one, b. bootstrap wrong colors our docs branding handful primary differentiate what other words, if it&rsquo;s purple, representative lorem ipsum. "
    },

    {
    "url": "https://heathshults.github.io/about/credits/",
    "title": "",
    "content": ""
    },

    {
    "url": "https://heathshults.github.io/about/license/",
    "title": "",
    "content": ""
    },

    {
    "url": "https://heathshults.github.io/about/wasindex/",
    "title": "",
    "content": ""
    },

    {
    "url": "https://heathshults.github.io/about/css-guidelines/",
    "title": "CSS Coder Guidelines",
    "content": "introduction css not pretty language. while it simple to learn get started with, soon becomes problematic at any reasonable scale. there isn’t much we can do change how works, but make changes the way author structure it. working on large, long-running projects, with dozens of developers differing specialities abilities, important that all work unified order (among other things) keep stylesheets maintainable; code transparent, sane, readable; scalable. are variety techniques must employ satisfy these goals, guidelines document recommendations approaches will help us so. syntax formatting looks clean feels clean. nicer environment in, prompts team members maintain standard cleanliness they found. ugly sets bad precedent. very high-level, want two (2) space indents, tabs; 80 character wide columns; multi-line css; meaningful use whitespace. multiple files break down components into separate scss for better easier management. example: _list-group.scss _media.scss _mixins.scss _modal.scss _nav.scss _navbar.scss _pagination.scss _popover.scss _print.scss _progress.scss _reboot.scss _tables.scss _tooltip.scss _transitions.scss application.scss finally import single file production. @import &#34;functions&#34;; &#34;variables&#34;; &#34;mixins&#34;; &#34;print&#34;; &#34;reboot&#34;; &#34;type&#34;; &#34;images&#34;; &#34;code&#34;; &#34;grid&#34;; &#34;tables&#34;; &#34;forms&#34;; &#34;buttons&#34;; &#34;transitions&#34;; &#34;dropdown&#34;; &#34;button-group&#34;; &#34;input-group&#34;; &#34;custom-forms&#34;; &#34;nav&#34;; &#34;navbar&#34;; &#34;card&#34;; &#34;breadcrumb&#34;; &#34;pagination&#34;; &#34;badge&#34;; &#34;jumbotron&#34;; &#34;alert&#34;; &#34;progress&#34;; table contents clear you your colleges understand where what contain. /** settings global...............globally-available variables config. tools mixins...............useful mixins. generic normalize.css........a level playing field. box-sizing...........better default `box-sizing`. base headings.............h1–h6 styles. objects wrappers.............wrapping constraining elements. page-head............the main page header. page-foot............the footer. buttons..............button trumps text.................text helpers. */ each item maps section and/or include. naturally, would be substantially larger majority hopefully see section—in master stylesheet—provides project-wide view being used where, why. characters possible, limit files’ width characters. reasons include ability have open side by side; viewing sites like github, terminal windows; providing comfortable line length comments. am long-form comment. describe, detail, follows. such long comment easily limit, so broken across several lines. **/ unavoidable exceptions rule—such as urls, gradient syntax—which shouldn’t worried about. titling begin every new major project title: /*------------------------------------*\ #section-title \*------------------------------------*/ .selector title prefixed hash (#) symbol allow perform more targeted searches (e.g. grep, etc.): instead searching just section-title—which may yield many results—a scoped search should return only question. leave carriage between next (be comment, some sass, css). if its own file, appear top one. sections per preceded five (5) returns. extra whitespace coupled makes spot when scrolling through large files: #a-section #another-section .another-selector anatomy ruleset before discuss write out our rulesets, let’s first familiarise ourselves relevant terminology: [selector] [property]: [value]; [&lt;--declaration---&gt;] .foo, .foo--bar, .baz display: block; background-color: green; color: red; here related selectors same line; unrelated lines; opening brace (&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;); properties values after property–value delimiting colon (:); declaration class=&quot;p&quot;&gt;{&lt;/span&gt;) last selector; closing (}) indented spaces; trailing semi-colon (;) declaration. format seems largely universal (except variations number spaces, lot preferring (2)). such, following incorrect: display:block; background-color:green; color:red problems tabs does sit (and, admittedly, optional) missing; spaces colons (:). written lines, except specific circumstances. benefits this: reduced chance merge conflicts, because piece functionality exists line. ‘truthful’ reliable diffs, one ever carries change. rule fairly apparent, similar rulesets carry each, .icon inline-block; width: 16px; height: background-image: url(/img/sprite.svg); .icon--home background-position: .icon--person -16px .icon--files -16px; .icon--settings types benefit from single-lined still conform one-reason-to-change-per-line rule; share enough similarities don’t need read thoroughly rulesets—there able scan their selectors, which interest cases. indenting individual declarations, indent entire signal relation another, .foo .foo__bar .foo__baz doing this, developer glance {} lives inside {}. quasi-replication dom tells about classes expected without them having refer snippet html. sass provides nesting functionality. say, writing .bar blue; …we left compiled css: stick also blank nested ruleset. n.b. avoided wherever possible. specificity details. alignment attempt align common identical strings -webkit-border-radius: 3px; -moz-border-radius: border-radius: position: absolute; top: 0; right: bottom: left: margin-right: -10px; margin-left: padding-right: 10px; padding-left: life little whose text editors support column editing, allowing aligned lines go. indentation, provide information liberal judicious rulesets. use: (1) empty closely loosely entirely sections. #foo .foo--baz #bar .bar__baz .bar__foo never scenario an them. html given css’ inherently interconnected nature, remiss me cover markup. always quote attributes, even without. reduces accidents, familiar developers. (and valid): &lt;div class=box&gt; …this preferred: class=&#34;box&#34;&gt; quotes required here, err safe class attribute, thus: class=&#34;foo bar&#34;&gt; other, consider grouping square brackets ]), so: class=&#34;[ box box--highlight bio bio--long ]&#34;&gt; firm recommendation, something trialling myself, benefits. possible denote thematic breaks content &lt;header class=&#34;page-head&#34;&gt; ... &lt;/header&gt; &lt;main class=&#34;page-content&#34;&gt; &lt;/main&gt; &lt;footer class=&#34;page-foot&#34;&gt; &lt;/footer&gt; independent snippets markup line, &lt;ul class=&#34;primary-nav&#34;&gt; &lt;li class=&#34;primary-nav__item&#34;&gt; &lt;a href=&#34;/&#34; class=&#34;primary-nav__link&#34;&gt;home&lt;/a&gt; &lt;/li&gt; class=&#34;primary-nav__item primary-nav__trigger&#34;&gt; href=&#34;/about&#34; class=&#34;primary-nav__link&#34;&gt;about&lt;/a&gt; class=&#34;primary-nav__sub-nav&#34;&gt; &lt;li&gt;&lt;a href=&#34;/about/products&#34;&gt;products&lt;/a&gt;&lt;/li&gt; href=&#34;/about/company&#34;&gt;company&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; href=&#34;/contact&#34; class=&#34;primary-nav__link&#34;&gt;contact&lt;/a&gt; allows parts glance, certain editors—like vim, example—to manipulate empty-line-delimited blocks further reading commenting cognitive overhead huge. aware of, project-specific nuances remember, worst situation most find themselves the-person-who-didn’t-write-this-code. remembering classes, rules, objects, helpers manageable extent, anyone inheriting barely stands chance. needs declarative language doesn’t really paper-trail, often hard discern—from looking alone— whether relies elsewhere; effect changing else might used; styles inherit (intentionally otherwise); pass intended used. take account quirks—such various sates overflow triggering block context, transform hardware acceleration—that baffling projects. result telling story well, heavily commented. rule, anything immediately obvious alone. tell someone red, you’re using overflow: hidden; floats—as opposed clipping element’s overflow—this probably worth documenting. high-level comments components, docblock-esque adheres width. real-life example header wizardry: site’s page-head different states: 1) regular backgrounds treatments; contains logo nav. 2) masthead has fluid-height (becoming fixed point) background image, supporting text. incredibly simple, version slightly intermingled dependency wrapper detail norm non-trivial code—descriptions states, permutations, conditions, treatments. object–extension pointers partials, oocss manner, conjunction location. example, button object—which purely structural styles—which extended component-level partial add cosmetics. relationship pointers. object file: extend `.btn {}` _components.buttons.scss. .btn theme rules _objects.buttons.scss. .btn--positive .btn--negative low effort difference who unaware relationships wanting know how, why, inherited from. low-level oftentimes declarations (i.e. lines) kind reverse footnote. complex detailing site headers mentioned above: act mastheads. faux-fluid-height controlled wrapping element 1\. mastheads typically dark backgrounds, sure contrast okay. value subject image changes. 2\. delegate masthead’s layout rather than itself: things positioned. 3\. positioning context lay nav in. 4\. technique: simply create illusion fluid height creating via percentage padding, then position everything over that. gives 16:9 ratio. 5\. viewport 758px wide, ratio means currently rendered 480px high. let’s… 6\. …seamlessly snip off feature height, and… 7\. …fix 480px. jumps moves fixed. actual takes padding border itself. .page-head--masthead margin-bottom: background: url(/img/css/masthead.jpg) center #2e2620; @include vendor(background-size, cover); $color-masthead; /* [1] border-top-color: border-bottom-width: box-shadow: 10px rgba(0, 0, 0.1) inset; media-query(lap-and-up) url(/img/css/masthead-medium.jpg); media-query(desk) url(/img/css/masthead-large.jpg); &gt; .wrapper [2] relative; [3] padding-top: 56.25%; [4] @media screen (min-width: 758px) [5] [6] $header-max-height double($spacing-unit) $header-border-width; [7] documentation place whilst referring belong. preprocessor most—if all—preprocessors, option resulting file. either. documenting compiled, compile also. correct: // dimensions @2x sprite: $sprite-width: 920px; $sprite-height: 212px; icon size 16px. squash retina sprite display correct size. .sprite url(/img/sprites/main.png); background-size: ($sprite-width ($sprite-height 2); documented variables—code file—with comments, whereas css—code file—is available debugging stylesheets. removing go saying production environments—all minified, loss deployed. naming conventions hugely useful making strict, informative. good convention type thing does; (else) to. follow simple: hyphen (-) delimited strings, bem-like pieces code. it’s noting normally css-side development; come viewed (-), .page-head .sub-content camel case underscores classes; .pagehead .sub_content larger, interrelated ui require convention. bem, meaning block, element, modifier, front-end methodology coined yandex. bem complete methodology, concerned further, bem-like; principles exactly same, differs slightly. splits components’ three groups: block: sole root component. element: component part block. modifier: variant extension analogy (note, example): .person .person__head .person--tall elements (__), modifiers hyphens (--). discrete entity. element; smaller finally, modifier; starting starts logical, self-contained, continue person-based analogy, we’d .room__person {}, room higher context. blocks, .room .room__door .room--kitchen did selector bridges increase scope existing realistic properly look chunk represents .page .content .footer .footer__copyright incorrect notation be: .page__content .page__sub-content .page__footer .page__copyright stops. applies ui. layers were another element—called, .person__eye {}—to component, step layer dom. .person__head__eye reflect full paper-trail modifying variants elements, denoted ways depending why modified. carrying person blue eye .person__eye--blue we’re directly element. complex, however. please excuse crude imagine face handsome. handsome, modify directly—a handsome person: .person__face--handsome style fact? .person--handsome .person__face few occasions descendant based modifier likely &amp; note nest instance {}; instead, sass’ parent prepend onto selector. {}-related exist once place, aren’t spread throughout general practice dealing code: code) encapsulated previously hinted at, necessarily css. conventions’ power lies following, non-naming-conventioned html: class=&#34;box profile pro-user&#34;&gt; &lt;img class=&#34;avatar image&#34; /&gt; &lt;p class=&#34;bio&#34;&gt;...&lt;/p&gt; &lt;/div&gt; other? avatar all? pro-user alongside bio? live css? anywhere else? alone, answer those questions. convention, however, that: profile--is-pro-user&#34;&gt; profile__image&#34; class=&#34;profile__bio&#34;&gt;...&lt;/p&gt; now clearly how; can’t outside component; free reuse elsewhere. javascript hooks unwise bind js (or remove) (removing) other. cleaner, maintainable classes. known trying refactor unwittingly removed tied other—it was impossible typically, prepended js-, &lt;input type=&#34;submit&#34; class=&#34;btn js-btn&#34; value=&#34;follow&#34; elsewhere behaviour .js-btn. data-* attributes hooks, incorrect. spec, store custom data private application (emphasis mine). designed data, bound taking mentioned, conventions, ones distinct groups class. encourage up functionality—i i’m framekit research investigate further. mindbemding getting head ’round perhaps somewhat surprisingly, fundamental, critical aspects scalable selectors. specificity, portability, reusability direct impact mileage css, headaches bring us. intent correctly, selecting right reasons. process deciding defining website’s navigation menu, unwise: ul selector’s navigation. poor intent: page, turn house uls, runs risk applying styling undo greedy nature approach like: .site-nav unambiguous, explicit intent. explicitly reason. biggest far too greedy—and apply treatments reaching selectors—causes unexpected effects leads tangled stylesheets, overstepping intentions impacting interfering otherwise cannot encapsulated, leaky, mitigate globally-operating selectors: reasoned reason select something. move toward component-based constructing uis, idea paramount. move, recycle, duplicate, syndicate end, heavy ids, over-specific, reused infinite amount times. choose, name, lend itself reused. location independence ever-changing architectures, interests are, are. reliant upon them—they remain independent. call-to-action chosen selector: .promo intent—it greedily link button—it wasteful locationally dependent: been: styling. selector, portable, recyclable, dependencies, way. portability reducing, or, ideally, removing, dependence around freely, improving components? lower level, themselves—as create—more portable. input.btn qualified leading input ties omitting qualification, a, button. reused, authored mind. course, times legitimately qualify selector—you particular class, embolden colour `.error`. .error font-weight: bold; `div`, give box-like div.error padding: border: 1px solid; justifiable, recommend text-level errors. .error-text contain .error-box div—it reusable quasi-qualified signalling used, ul.nav .nav meant actually qualifying /*ul*/.nav read, avoid increasing phil karlton said, computer science: cache invalidation things. won’t former claim latter plagued years. my advice regard pick name sensible, ambiguous: aim high reusability. .site-nav, choose .primary-nav; .footer-links, favour .sub-links. differences names examples case: footer’s links respectively. ambiguous names, nicolas gallagher: tying semantics tightly already architecture scale put sensible names—classes .border .red advisable—but describe exact redundant describes debate surrounding raged years, adopt pragmatic, efficiently effectively. focussing ‘semantics’, sensibility longevity—choose ease maintenance, perceived meaning. people; they’re (everything merely matches them). again, strive reusable, recyclable becoming date; maintainable. .blue depends properly. .header span specific; limits reuse. .header-color nicely abstracted, date. .highlight-color strike balance literally brings, .home-page-panel, .masthead; .btn-login, opt .btn-primary. agnosticism mind helps construct uis quickly, less waste. sometimes beneficial particularly agnostic together form name. scenario, augment data-ui-component attribute houses class=&#34;tabbed-nav&#34; data-ui-component=&#34;main nav&#34;&gt; highly describe—and, therefore, tie to—a case, added attribute. data-ui-component’s wish, class-like: data-ui-component=&#34;main-nav&#34;&gt; namespaced: data-ui-component=&#34;nav-main&#34;&gt; implementation personal preference, concept remains: mechanism inhibit team’s recycle performance topic is—with quality today’s browsers—more interesting important, performance. quickly browser match nodes finds generally speaking, longer parts) slower is, body.home div.header …is efficient than: .primary-nav browsers right-to-left. dom; check .header; div .home; .home body second, contrast, .primary-nav. compound problem, {}). upshot start rightmost .bar) indefinitely until .foo). could mean stepping preprocessors false economy; unnecessarily specific, dependency, creates browser. child {}) efficient, requires dom, stop regardless found match. key right-to-left, performance: called performant glance. uses id nice fast, surely speedy lookup—just it: problem (*) very, reaching. node (even &lt;title&gt;, &lt;link&gt;, &lt;head&gt; elements; everything) within #foo. expensive rewritten. thankfully, intent, avoiding inefficient default; unlikely targeting list optimise; faster, notable edge cases pose problem. issues, nesting, qualifying, contribute fundamental briefly sum above sections: explicitly, relying circumstance coincidence. rein reach leak reusability, reduce waste repetition. unnecessarily, affect short up. points sane easy shoot kill; ‘scope’ we’ve seen, friendly languages: globally operating, dependent location, encapsulate, inheritance… but! none comes close horrors specificity. matter considered naming, perfect source cascade managed, you’ve overly-specific everything. gigantic curveball, undermines cascade, inheritance, order. precedents undone. real responsible years ago: #content exhibit intent—i didn’t area, wanted happened there—it over-specific became apparent weeks later, needed second table: uh oh! overwritten `#content {}`. .my-new-table trumping defined it, against source-order remedy had options. remove id; override unfortunately, refactoring taken time; mature product knock-on been substantial business cost option: still! one, least i’ve downward spiral. can, among things, codebase; interrupt cascading, nature; cause avoidable verbosity project; prevent moved environments; lead serious frustration. issues greatly magnified contributing low; fact opted of: deal progressively specific—the notorious wars looked above. single, simplest tips css—particularly scale—is try variance codebase, instantly tame manage project, fight corners, you’ll include, limited to, ids selectors; chaining wrangled understood, safer entirely. low, do, quick-win, easy-to-follow us: non-reusable, vastly therefore become anomalies. rest relatively id-based comparatively, much, higher. fact, highlight severity difference, thousand chained id: jsfiddle.net/0yb7rque. (please firefox rendering blue: bug, overridden 256 classes.) perfectly okay javascript; prove troublesome. suggested works. offensive: experienced circumvented; knowledge specific. opting introduces occurring and—particularly scale—all efforts made potential arise. sentence: introducing risk. potentially code, time pitfalls: talk talking rely thing. following: `.bar` `.foo`. `.module-title` `.module`. .module .module-title `li` `ul` `nav` li arrive tout feature, adds ergo, fewer overall low. jonathan snook: …whenever declaring styles, .widget .widget__title .widget__title, twice be. modifications we’ll at-least-equally .widget__title--sub avoidable—we caused ourselves—we double 200% required. that, needless code—more send wire. advantage nesting—which, outweigh disadvantages increased specificity—is namespace sorts. .title scopes .widget. goes encapsulation, namespace—which naming—which unnecessary minimal specificity—the best both worlds. !important word sends shivers spines almost manifestation specificity; cheating wars, usually price. resort—a desperate, defeated stab patching symptoms bigger thing, but, jamie mason: children principles. black-and-white adhering principle. out, grow developer, principle behind keeping bent… sparingly proactively. proactive encountered problems; guarantee fix. .one-half 50% !important; .hidden helper, utility, intentions: all. behaviour, whenever definitely win. proactively ensure work, accidentally incorrect, reactive combat fact: poorly architected class=&#34;content&#34;&gt; &lt;h2 class=&#34;heading-sub&#34;&gt;...&lt;/h2&gt; …and h2 font-size: 2em; .heading-sub 1.5em force reactively circumvented including nesting. situations, preferable offending board, heavyweights. proactively, reactively. hacking said inevitable encounter problems. try, conscientious hack wrangle situations arise, handle hacks safely elegantly event discussed, dependency: component’s portability: chain .site-nav.site-nav doubles introduce whatever reason, replace embedded third-party widget page. outputs, edit ourselves: id=&#34;third-party-widget&#34;&gt; though have? access id. [id=&#34;third-party-widget&#34;] id, hacks, unless alternative. architectural forgiven thinking grandiose concept: straightforward, architecture?! simplicity, looseness, unruly managing (read, taming) strict architecture. solid control enforce order, development environment, projects consistent comfortable. tool, preprocessor, magic bullet, own: developer’s tool loose self-discipline, conscientiousness, diligence, well-defined facilitate traits. architectures overarching, principle-led collections managed maintained. quite details—such formatting, implementing design patterns paradigms, and, not, paradigms born scientists software engineers. ‘code’, traits programming languages work. section, code—and reuse—in overview environment; accommodate change; promote efficiency; productivity. class-based componentised architecture, split modules, preprocessor. principles… object-orientation paradigm programs smaller, in(ter)dependent roles responsibilities. wikipedia: object-oriented (oop) ‘objects’ […] instances [and] interact applications programs. applied call oocss. popularised nicole sullivan, media poster methodology. deals separation skin: breaking underlying forms, layering cosmetic forms separately. recurring cheaply details time. promotes quicker, codebase down. thought skeletons; common, frames design-free constructs abstractions. abstractions devoid cosmetics; abstract shared series object. skin (optionally) look-and-feel. `.btn--*` 1em vertical-align: middle; positive buttons’ skin. extends `.btn`. white; negative above, concern supplement cosmetics: &lt;button btn--negative&#34;&gt;delete&lt;/button&gt; multiple-class @extend: markup—as preprocessor— markup, acting html; greater composition building parts: (paddings, layout, etc.) (colours, typefaces, etc.). saves hundreds flag responsibility loosely, states (in classes) focus only. formally: …the (class, function, variable, responsibility, composed decompose smallest serve responsibility; job, combined versatile constructs. adhere principle: .error-message border-top: #f00; border-bottom: #fee; .success-message #0f0; #efe; that—despite named use-case—these handling lot: structure, (oocss) inline four responsibilities: .box .message border-style: border-width: .message--error .message--success abstraction boxes live, completely separately message repetition reduced, compose increased. great tandem. responsibilities, flexibility, extending functions sticking open/closed principle, going next. opinion, named. vital omitted title. [s]oftware entities (classes, functions, extension, closed modification. see? words—extension _modification_—are missing trained yourself remember words relate remarkably additions, functionality, features _extension_—we directly. trains bulletproof directly, abstraction—we’d it—but slight .box--large 20px; stripped back small focussed responsibility. box, class; modification, extended. achieving overly dependent, displaying rarely—if ever—find abstraction’s troublesome forces placed .content, modification dictated developers, allowed explicitly; unpredictable developers; produces forced caveat. modifications, opt-in, mandatory. think adjustment away norm, api-like backward compatible root) features. object, abstraction, huge elsewhere, present transpires rewrite refactor, remember: extension; dry dry, repeat yourself, micro-principle aims minimum. formal definition [e]very authoritative representation system. although principle—in principle—dry misinterpreted necessity project. impractical counterproductive, abstractions, over-thought -engineered unusual dependencies. repetition, normalise happen coincidentally, needn’t out; circumstantial abstracted. [...] .page-title 3rem; line-height: 1.4; .user-profile__title 1.2rem; 1.5; reasonably deduce appears coincidentally. mixin, @extend directive cater overkill, circumstance. web-font declared font-family is: font-family: &#34;my web font&#34;, sans-serif; repeating together. instance, mixin because, thematically grouped, separate, entities: physically group thus related. mixin: @mixin my-web-font() my-web-font(); once, ourselves. switch web-font, normal; version, place. short, actually, coincidental repetition: duplication wrong abstraction. dryer vanilla inheritance spotting composing composites parts. sullivan likens lego; tiny, quantities permutations multitude results. referred inheritance. suggests systems parts, monolithic decoupled—nothing else. valuable considering uis. rapidly set composable objects. error section; created concerns which, first, sounds sections, addresses concern. affects program. program embodies soc modular to; pieces. covers concepts modularity encapsulation focusses task term edsger w. dijkstra, said: let explain you, taste characteristic intelligent thinking. willing study depth aspect one’s isolation sake consistency, knowing occupying oneself aspects. viewpoint only; efficiency day, speak. mood ask whether, desirable. nothing gained—on contrary!—by tackling simultaneously. ‘the concerns’, yet technique effective ordering thoughts, of. ‘focusing attention aspect’: ignoring aspects, justice aspect’s point view, irrelevant. one- multiple-track minded beautiful. fully once; build job paying facets addressed built isolation—meaning modular, decoupled, encapsulated—you bringing layout. grid system, pertaining own, handles that’s class=&#34;layout&#34;&gt; class=&#34;layout__item two-thirds&#34;&gt; one-third&#34;&gt; new, layout: &lt;section &lt;/section&gt; class=&#34;sub-content&#34;&gt; self-sufficient, ignorant, ultimately confidently modified, edited, extended, maintained responsibilities reach. layout—nothing increases confidence reducing dependency. misconceptions feel, unfortunate seem revolve concerns. true. js), people believe. classes-in-html-purely-for-styling-hooks-blurring-the-lines-between-concerns; widely adopted, tables font color it; lack concerns, styling, technologies. argument putting puts so, bid circumvent header:first-of-type "
    },

    {
    "url": "https://heathshults.github.io/about/cheat-sheet/",
    "title": "Framekit Cheate Sheet",
    "content": ".hightlight margin: 2rem 0; global variables $fk-separator-breakpoint: the seperator for responsive classes example: u-display-none@sm (hide on small breakpoint) typography mixin fk-type($name) sets font-weight, font-size, line-height, letter spacing font-size: fk-type(&#39;display1&#39;) ### available options: display1, display2, headline1, headline2, headline3, headline4, headline5, category1, category2, category3, body1, body2, body3, micro various functions type. try not to use unless absolutly necessary text-size(&#39;xxxl&#39;) font-weight(&#39;semibold&#39;) line-height() $fk-type-default-letter-spacing theme background colors get color function fk-theme-get-bg($name, $mode: $fk-theme-default-mode) fk-theme-bg($bgname) (click button more below.) sets: background-color text light dark mode canvas layer1 layer2 layer3 brand1 brand2 overlay gray1 gray2 fk-shade() provides rgba nuetral. 05 being most transparent, 90 least options are: fk-shade(05) fk-shade(10) fk-shade(15) fk-shade(25) fk-shade(50) fk-shade(75) fk-shade(90) fk-theme-get-text(name, fk-theme-text($name) default, primary secondary success warning brand3 error subtle link hint (do at time) border __fk-theme-get-border($name, $fk-theme-default-mode)__ feedback interactive identifiers) __fk-theme-get-interactive($name, messaging __fk-theme-get-messaging($name, $type:&#39;strong&#39;, shadow __fk-theme-get-shadow($name, $type:&#39;outset&#39;, generic __fk-theme-get-prop($mode, $type, $name, $keys... )__ prop from tokens. typically directly used. shortcut &lt;br /&gt; fk-theme-get-prop(&#34;lm&#34;, &#39;text&#39;, &#39;primary&#39;) &#39;messaging&#39;, &#39;error&#39;, &#39;strong&#39;) fk-theme-determine-mode($bgcolor) given (any hex) it returns &#39;lm&#39; &#39;dm&#39; depending if its color. mixins fk-theme-switcher($prop, $onlight, $ondark) $prop: css property like &#39;color&#39;, &#39;backgroud-color&#39; $onlight: value $ondark: mod will write root prop: default set fk-theme-in-dark() fk-theme-in-light() wrap display .customclass @include fk-theme-in-dark(){ be used map() dot seperate token address of map location, back. out gives back value. val needing map(&#39;type.font-weight.sans&#39;) val() seperated address, errors return map. get() whatever is.. "
    }

]}
